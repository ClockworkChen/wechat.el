1.
我会花5分钟时间带领你体验Clojure。你随时可以输入“next”跳到下一节，也可以输入“back”返回到上一节，或者“restart”重新开始。
现在让我们开始：输入“next”

2.
你可能马上就注意到：Clojure看起来有点...奇怪。
请试着输入“(+ 3 3)”

3.
这是一种很别扭的方式说“三加三”，不是吗？Clojure程序由“列表”（list）构成。“(+ 3 3)”就是包含一个运算符“+”和两个运算数（“3”和“3”）的列表。此外，乘号“*”和减号“-”也是合法的运算符。
请输入“(/ 10 3)”，你会看到意想不到的结果

4.
好吧，也许有点惊讶：Clojure自带了分数类型。当然，你也能强制要求Clojure做浮点数除法：
请继续输入“(/ 10 3.0)”

5.
太棒了！
我们把这种运算符放在最前面的表达式称为“前缀表达式”，它的好处是能接收任意个参数。
试试输入“(+ 1 2 3 4 5 6)”

6.
和数学相关的内容就介绍到这里，接下来看看其他好玩的玩意儿，比如用“defn”来定义函数。
输入“(defn square [x] (* x x))”来定义一个名字叫“square”的函数：接收一个数并返回它的平方。

7.
恭喜！你刚刚定义了你人生中第一个Clojure函数，接下来还会定义更多！
“defn”需要一个函数的名字（name）、一组参数（arguments），以及函数体（Body）。
我曾经说过，Clojure程序由列表构成，对吧？在此处，整个“defn”就是一个列表，函数体同样是列表。
虽然参数是一个向量（vector），但它和列表很相似，我们很快就会涉及向量相关的内容。

不好意思，啰嗦了这么多。你可能已迫不及待地要测试刚刚定义的函数了！
输入“(square 10)”

8.
欧耶！它做到了！
到目前为止，你可能觉得Clojure和你已熟知的编程语言相去甚远。
确实，Clojure属于一类叫“函数式”的编程语言家族，和流行的编程语言很不一样。
和多数函数式语言一样，Clojure能定义一个匿名函数。
试试输入“(fn [x] (* x x))”

9.
上面的代码返回了很古怪的输出。
在Clojure里，函数和数值或字符串一样，仅仅是另一种类型的值。
“fn”定义并返回一个函数，你所看到的只是将函数输出到屏幕上的样子。

但是，如果一个匿名函数不能被调用，那将一无是处。
试试定义一个匿名函数，然后直接调用它：“((fn [x] (* x x)) 10)”

10.
让我们看看你刚刚做了什么：你执行一个列表，其中第一个元素是一个当场定义的函数；剩下的元素作为该函数的参数。
这与你之前调用“square”或者“+”是完全相同的，唯一的区别是你定义函数的地方恰好也是调用它的地方。

记住“defn”了吗？
现在，我告诉你一个秘密：“defn”实际上只是一个语法糖，实际上它仅仅是包装了“def”和“fn”。
正如你在上面看到的，“fn”用于定义一个新的函数；“def”则把这个新函数绑定到一个名字上。

你完全可以创建一个新的函数，但不用“defn”：
试试“(def square (fn [x] (* x x)))”

11.
成功了！现在你能像调用老的“square”那样调用新的“square”。
到目前为止，你已经认识到列表（list）在Clojure中是相当重要的。
但Clojure还提供了其他常用的集合：
1. 向量（Vector）：向量和列表中的元素顺序是有序的
   例如 [1 2 3 4]，第零个元素是1、第一个元素是2，依此类推
2. 集合（Set）：顺序无关，且不能包含重复的元素
   例如 #{1 2 3 4}，包含四个不重复的元素，但每个元素所在的位置未知
3. 映射（Map）：键值对（key-value）的集合，其中键（key）可以是任何对象
   例如 {:foo "bar" 3 4}，其中键由一种在Clojure中称作“关键字”（keyword）的对象“:foo”和一个数值“3”构成。

12.
现在，我来告诉你另一个惊人的事情：Clojure的集合都是“不可变”的。
当你操作一个列表，比如添加或删除元素，你实际得到一个全新的列表（幸运的是，Clojure以惊人的效率创建新列表）。
Clojure鼓励你尽量不使用“可变状态”，因此多数情况下你会看到将一个函数作用于不可变的数据，再返回新值，原始值保持不变；而不是使用“for”循环等控制语句去改变状态。
一个典型的例子是“map”函数（不是上面提的映射结构）。“map”是一个“高阶函数”，即它需要一个函数作为参数。
例如，你可以向“map”函数传递“inc”函数和一个向量，让它为向量中的每一个元素加一。
你可以尝试一下：输入“(map inc [1 2 3 4])”。

13.
做的太好了！
我们还仅涉及到Clojure强大特性的冰山一角。
这个教程还在继续当中，我试着添加更多的内容。
与此同时，你还可以输入“links”获得更多与Clojure相关的内容。
恭喜你开启了Clojure的冒险之旅，请做好准备迎接每一步的惊喜！
